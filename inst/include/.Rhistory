x <- 1.0
x <- 1
typeof(x)
x <- 1L
x
typeof(x)
dim(x)
x <- c(1.0,2.0)
x
dim(x)
length(x)
x <- matrix(0.0,nrow=2,ncol=3)
dim(x)
is.vector(x)
is.matrix(x)
?list
is.scalar(x)
is.vector(x)
x <- 1.0
is.vector(x)
f <- list(f=1.0,r=c(1.0,2.0))
f
f["f"]
f["r"]
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
cur <- data.example[nms[i]]
if(is.vector(cur)){
# vector or scalar
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} elseif(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
# matrix
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} elseif(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
cur <- data.example[nms[i]]
if(is.vector(cur)){
# vector or scalar
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} elseif(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
# matrix
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} elseif(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
cur <- data.example[nms[i]]
if(is.vector(cur)){
# vector or scalar
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
# matrix
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
f
is.integer(f$f)
f <- list(f=1L,r=c(1.0,2.0))
f
is.integer(f$f)
make.data.declarations(f)
f <- list(f=1.0,r=c(1.0,2.0))
make.data.declarations(f)
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
cur <- data.example[nms[i]]
print(cur)
if(is.vector(cur)){
# vector or scalar
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
# matrix
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations(f)
is.numeric(f$f)
?if
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
cur <- data.example[nms[i]]
print(cur)
if(is.vector(cur)){
print("vecctor")
# vector or scalar
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else if(is.matrix(cur)) {
# matrix
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
cur <- data.example[nms[i]]
print(cur)
if(is.vector(cur)){
print("vecctor")
# vector or scalar
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else if(is.matrix(cur)) {
# matrix
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations(f)
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
cur <- data.example[nms[i]]
print(cur)
if(is.vector(cur)){
print("vector")
orint(is.numeric(cur))
# vector or scalar
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else if(is.matrix(cur)) {
# matrix
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations(f)
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
cur <- data.example[nms[i]]
print(cur)
if(is.vector(cur)){
print("vector")
print(is.numeric(cur))
# vector or scalar
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else if(is.matrix(cur)) {
# matrix
if(is.integer(cur)){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} else if(is.numeric(cur)){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations(f)
is.numeric(f$f)
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
if(is.vector(data.example[nms[i]])){
print("vector")
print(is.numeric(data.example[nms[i]]))
# vector or scalar
if(is.integer(data.example[nms[i]])){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} else if(is.numeric(data.example[nms[i]])){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else if(is.matrix(data.example[nms[i]])) {
# matrix
if(is.integer(data.example[nms[i]])){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} else if(is.numeric(data.example[nms[i]])){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations(f)
f
is.numeric(f$f)
make.data.declarations <-function(data.example){
nms <- names(data.example)
out <- ""
for(i in 1:length(names)){
if(is.vector(data.example[nms[i]])){
print(typeof(data.example[nms[i]]))
print(is.numeric(data.example[nms[i]]))
# vector or scalar
if(is.integer(data.example[nms[i]])){
type <- "Eigen::Matrix<int,Eigen::Dynamic,1>"
} else if(is.numeric(data.example[nms[i]])){
type <- "Eigen::Matrix<double,Eigen::Dynamic,1>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else if(is.matrix(data.example[nms[i]])) {
# matrix
if(is.integer(data.example[nms[i]])){
type <- "Eigen::Matrix<int,Eigen::Dynamic,Eigen::Dynamic>"
} else if(is.numeric(data.example[nms[i]])){
type <- "Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic>"
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
} else {
stop(paste0(" unsupported data type for field ",nms[i]))
}
out <- paste0(out,type," ",nms[i],"; \n")
}
return(out)
}
make.data.declarations(f)
?list
typeof(f$f)
typeof(f["f"])
unlist(f["f"])
unlist(f$f)
unlist(f["f"])[2]
unlist(f["f"])[1]
f<-typeof(f$f)
f
f <- list(f=1.0,r=c(1.0,2.0))
typeof(f$f)
f <- list(f=1L,r=c(1.0,2.0))
typeof(f$f)
typeof(f["f"])
q()
10/17
9/17
A <- matrix(c(1,0,0,0,0,2,0,0.5,0,0,3,0,0,0.5,0,4),4,4)
A
L <- t(chol(A))
b <- c(1,2,3,4)
solve(t(L),b)
solve((L),b)
A <- matrix(c(1,0,0,0,0,2,0,0.5,0,0,3,-0.3,0,0.5,-0.3,4),4,4)
A
L <- t(chol(A))
solve(t(L),b)
A <- matrix(c(1,0,0,0.1,0,2,0,0.5,0,0,3,-0.3,0.1,0.5,-0.3,4),4,4)
A
L <- t(chol(A))
solve(t(L),b)
solve((L),b)
A <- matrix(c(1,0.3,0,0.1,0.3,2,0,0.5,0,0,3,-0.3,0.1,0.5,-0.3,4),4,4)
A
chol(A)
A <- matrix(c(1,0.3,0,0.1,0.3,2,0,0.5,0,0,3,-0.3,0.1,0.5,-0.3,4),4,4)
L <- chol(A)
L <- t(chol(A))
L
b
solve(L,b)
solve(A,b)
log(det(L))
log(det(A))
setwd("~/Dropbox/work/PDP_HMC/package/pdphmc/inst/include")
